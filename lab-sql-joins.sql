USE sakila;

## 1. List the number of films per category.
SELECT c.name, COUNT(fc.film_id) AS number_of_films
FROM category c # Usamos c como alias para category
JOIN film_category fc ON c.category_id = fc.category_id # Usamos fc para film category
GROUP BY c.name;
## 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id, ci.city, co.country
FROM store s # Alias s para store
JOIN address a ON s.address_id = a.address_id # Alias a para address
JOIN city ci ON a.city_id = ci.city_id # Alias ci para city
JOIN country co ON ci.country_id = co.country_id; # Alias co para country
## 3. Calculate the total revenue generated by each store in dollars.
# Para relacionar STORE y PAYMENT, que no tienen columnas en común, hay que buscar en qué tablas
# podemos hacer las conexiones: STORE <-- INVENTORY <-- RENTAL <-- PAYMENT
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
GROUP BY s.store_id;
## 4. Determine the average running time of films for each category.
# podemos hacer las conexiones:  FILM(film_id,length) <-- FILM_CATEGORY (film_id,category_id) <-- CATEGORY(category_id,name)
SELECT c.name, AVG(f.length) AS average_length
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name;
## 5. Identify the film categories with the longest average running time.
# La misma query de antes, pero ahora además ordenamos y cogemos el primero:
SELECT c.name, AVG(f.length) AS average_length
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY average_length DESC
LIMIT 1; 
## 6. Display the top 10 most frequently rented movies in descending order.
# podemos hacer las conexiones:  FILM(title, film_id) <-- INVENTORY (film_id,inventory_id) <-- RENTAL(inventory_id,rental_id)
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;
## 7. Determine if "Academy Dinosaur" can be rented from Store 1.
# podemos hacer las conexiones: STORE(store_id) <-- INVENTORY(film_id,store_id) <-- FILM(title, film_id)
SELECT f.title, s.store_id, COUNT(i.inventory_id) AS available_copies
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN store s ON i.store_id = s.store_id
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1
GROUP BY f.title, s.store_id;
## 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
## Include a column indicating whether each title is 'Available' or 'NOT available.' 
## Note that there are 42 titles that are not in the inventory, and this information can be obtained using a 
## CASE statement combined with IFNULL."
## Como no están en el inventario pero queremos que salgan, hay que hacer LEFT JOIN 
SELECT f.title,
	CASE
		WHEN IFNULL(MAX(i.inventory_id), 0) = 0 THEN 'NOT available'
        ELSE 'Available'
	END AS availability
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
GROUP BY f.title;